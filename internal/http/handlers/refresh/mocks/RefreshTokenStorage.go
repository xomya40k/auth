// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	config "auth/internal/config"
	database "auth/internal/database"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// RefreshTokenStorage is an autogenerated mock type for the RefreshTokenStorage type
type RefreshTokenStorage struct {
	mock.Mock
}

// GetRefreshToken provides a mock function with given fields: bindKey
func (_m *RefreshTokenStorage) GetRefreshToken(bindKey string) (database.RefreshClaims, error) {
	ret := _m.Called(bindKey)

	var r0 database.RefreshClaims
	if rf, ok := ret.Get(0).(func(string) database.RefreshClaims); ok {
		r0 = rf(bindKey)
	} else {
		r0 = ret.Get(0).(database.RefreshClaims)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bindKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeRefreshToken provides a mock function with given fields: bindKey
func (_m *RefreshTokenStorage) RevokeRefreshToken(bindKey string) error {
	ret := _m.Called(bindKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(bindKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveRefreshToken provides a mock function with given fields: user_GUID, token, jwtConfig
func (_m *RefreshTokenStorage) SaveRefreshToken(user_GUID uuid.UUID, token string, jwtConfig config.JWT) (string, error) {
	ret := _m.Called(user_GUID, token, jwtConfig)

	var r0 string
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, config.JWT) string); ok {
		r0 = rf(user_GUID, token, jwtConfig)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string, config.JWT) error); ok {
		r1 = rf(user_GUID, token, jwtConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRefreshTokenStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewRefreshTokenStorage creates a new instance of RefreshTokenStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRefreshTokenStorage(t mockConstructorTestingTNewRefreshTokenStorage) *RefreshTokenStorage {
	mock := &RefreshTokenStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
